{
  "ID": "da74af7a-3096-4880-8249-be7a79fc8156",
  "Root": {
    "alive": true,
    "content": [
      "c275ed95-78e7-45ae-b3de-0abc36dbf435",
      "f11a8066-ce93-4180-952b-f8b435d21163",
      "506685a6-7509-4097-a9ee-9adfdfc8998f",
      "601f7b7a-777d-499f-b626-5df64e9af795",
      "97648eb6-056b-456c-9e3b-4145b4959605",
      "75a65864-7b93-46e3-b973-28e614034094",
      "6f8c15ad-ab2f-485f-b505-022c55f3c942",
      "6b61260f-de19-4d8e-9395-86cdad39b5a9",
      "03216ef2-f405-49e8-8d1b-156dea2e51ab",
      "e0949943-34d5-4527-aaad-90186cdfc10e",
      "f3763724-66a1-453d-97f9-bc6eba7fcb05",
      "d5c8cb8b-172f-4c00-b3ee-128778548074",
      "0f10e565-7d86-47c7-bdca-db4fddee49ae",
      "d422fc8a-84ce-4ee5-91e9-328a00633af7",
      "10ac40d9-ceee-4665-9931-fe5a856f574b",
      "da9ea584-d9ef-49c7-abd0-27e427d944a7",
      "b5ce4e98-8597-4570-9754-64a2f1635dd1",
      "f593fc28-d7d2-4122-9b4a-d3429b4949df",
      "b753eb2b-154e-491b-ba85-61349ab99d93",
      "893b7411-952e-4296-b6c9-4ae1b061985e",
      "d0afe73a-90ae-47aa-aeb3-ba642851fc3b",
      "0b27f433-13eb-4270-bfea-83114387e927",
      "2d94790d-6012-4f52-be52-93ba7cbf2964",
      "5f12114f-06a3-4cac-8699-11cc10f84d03",
      "53d8eba0-2030-4f92-9e8b-1d3e8534c19a",
      "cfab79ca-4172-42a1-93b3-01302e898689",
      "a957be6e-c3c7-40ac-bf52-7fa42a0c84b3",
      "bde85d9e-e119-42ef-b5c0-31430af0e53e",
      "dc03a541-d477-4b09-9846-d0a4ab4a3485",
      "7258c037-37ad-4355-a28f-557334e062c0",
      "46aa9e0c-2226-4f89-bfa3-28d4720d63dc",
      "e3bfd44f-e175-4c38-9933-03e258c649fc",
      "185bc3d8-0d0b-4835-97f9-9c40e32891d7",
      "467eeb74-6ff7-45d4-9527-cff0ec686245",
      "ba751519-e980-467f-8183-f94fab325ae0",
      "9e80f68a-3ffb-4eaa-a266-c9b581807e85",
      "985cb1dd-6f3e-44e4-97e5-d8f0f16ea0a6",
      "73b03091-d6a4-4817-b48f-68ee464be22b",
      "1d84b14b-903c-4226-976f-20d8b34ab503",
      "bfe3f127-69ac-4423-9d78-fc63b0aab5c8",
      "700fec6a-6c6a-4e63-895d-a4a5ee9398d0",
      "d7b2f73a-8078-4541-9d7e-e60e15f6d386",
      "d09a6f61-eb6a-4b9a-8fd1-0f7a5782e55c",
      "56e7a791-8826-4a70-b71a-c1f47ca445ab",
      "490c42a3-acc3-46c9-9a4c-a83e814a0a4c",
      "3e6d1ae3-be87-4a72-bc20-a0679987afa3",
      "d72b86c1-7a03-4ede-a7ca-1c5159300627",
      "e87dfaa5-9044-4d12-b16c-b1d3e3f05627",
      "142f1dd4-819c-4a84-925c-53f9eb9f3e32",
      "581888bf-69e8-402e-b9af-4ac1be293bda",
      "bf58432a-1f5b-42a8-bb28-29ebe5647873",
      "f37cc17c-f6d4-476e-aa8a-f60e67700b92",
      "419a6d4b-95b1-414d-938b-ba3c8a3070d7",
      "fa6ba0c2-2845-475a-b8c4-7dd277b662cd",
      "7f620bc8-fd48-4dd7-87b8-89396f042174",
      "c74c6ed1-065f-4d2d-85ad-ad3ea7428909",
      "deb80a56-62db-4681-8f23-6390e6c5abb1",
      "49d200e0-7ba8-470f-9d3e-3764f3798562",
      "1858d145-61b7-4410-ba34-130e3e929c52",
      "1988edad-ecb7-4ffd-b5f8-036d3d2066e0",
      "25d6f11b-39e5-4e48-a487-ba7d2e957f4f",
      "a2542ba1-07be-47f3-a116-654c0e100083",
      "5515be7a-a23c-4198-8a53-3e873ddc943c",
      "bfc94590-0a31-42c4-8b58-4993da13e106",
      "76cf46dc-962f-428c-9b49-c0d0baf90c5d",
      "81e5afa5-0241-4a14-bb4a-a76af183bb3b",
      "e0bfb95c-b395-4066-83a6-cab8a648e4f0",
      "5e70bdaa-2544-490b-b7c7-e6461ba4bbde",
      "75d153f0-2356-482a-8ea1-5b2ea4899865",
      "e3f1f4bd-ba75-4c9d-943c-28aeea34c316",
      "e6361372-45cb-4903-977b-e6e756f598c2",
      "9a201da9-1a11-4ad9-a5a8-ab3256ed72fa",
      "008c89be-b96e-488b-a80b-372224bc21a9",
      "c0f1f70d-5fb9-48f1-8429-ef8025a7a53b",
      "c1de6baf-c9fe-4370-9c53-5f9c86593603",
      "e96afea4-227c-438c-9e81-b600adfc78ed",
      "24abdf57-630d-4a21-a5d8-3d37f87a4d8d",
      "a803f06c-8d1a-4caf-a05e-32728612cfe5",
      "7ec4cfb0-3f11-494f-8a63-fcff70955cc9",
      "747a026f-b3a8-49c5-a705-f7bed851dcb5",
      "c09c256b-ba59-4ac6-9e59-d14c6851d326",
      "e92ffd64-e9b5-4b97-916a-ee09e473a311",
      "aa592d14-9e90-424d-b601-a84b0dcb1249",
      "382191d9-f927-402d-bb91-cda0ebb80467",
      "f0b689ae-c613-4bad-956c-bb1a7439624e",
      "116b7b6b-ff9c-471b-a841-177fca9c4fa4"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1531888786810,
    "file_ids": [
      "c4bfc136-2fdb-4e47-bc21-51698592fd00"
    ],
    "format": {
      "page_cover": "https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c4bfc136-2fdb-4e47-bc21-51698592fd00/header-09.jpg",
      "page_full_width": true,
      "page_small_text": true,
      "page_cover_position": 0.5
    },
    "id": "da74af7a-3096-4880-8249-be7a79fc8156",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1532405822077,
    "parent_id": "7495260a-1daa-4611-8858-ad2e049e77e6",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "3 ways to iterate in Go"
        ]
      ]
    },
    "type": "page",
    "version": 61,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888834073,
        "id": "c275ed95-78e7-45ae-b3de-0abc36dbf435",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888847744,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Id: 1Bkr"
            ]
          ]
        },
        "type": "text",
        "version": 6,
        "inline_content": [
          {
            "Text": "Id: 1Bkr"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888834073,
        "id": "f11a8066-ce93-4180-952b-f8b435d21163",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888834083,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Tags: go"
            ]
          ]
        },
        "type": "text",
        "version": 2,
        "inline_content": [
          {
            "Text": "Tags: go"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888834073,
        "id": "506685a6-7509-4097-a9ee-9adfdfc8998f",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888834083,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "CreatedAt: 2017-06-19T06:56:45Z"
            ]
          ]
        },
        "type": "text",
        "version": 2,
        "inline_content": [
          {
            "Text": "CreatedAt: 2017-06-19T06:56:45Z"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888834073,
        "id": "601f7b7a-777d-499f-b626-5df64e9af795",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532405822077,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "UpdatedAt: 2017-07-10T22:52:13Z"
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "UpdatedAt: 2017-07-10T22:52:13Z"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888834073,
        "id": "97648eb6-056b-456c-9e3b-4145b4959605",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888834083,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Collection: go-cookbook"
            ]
          ]
        },
        "type": "text",
        "version": 2,
        "inline_content": [
          {
            "Text": "Collection: go-cookbook"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888834073,
        "id": "75a65864-7b93-46e3-b973-28e614034094",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888834083,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "PublishedOn: 2017-07-09"
            ]
          ]
        },
        "type": "text",
        "version": 2,
        "inline_content": [
          {
            "Text": "PublishedOn: 2017-07-09"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888834073,
        "id": "6f8c15ad-ab2f-485f-b505-022c55f3c942",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888834083,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Description: 3 different way to implement an iterator in Go: callbacks, channels, struct with Next() function."
            ]
          ]
        },
        "type": "text",
        "version": 2,
        "inline_content": [
          {
            "Text": "Description: 3 different way to implement an iterator in Go: callbacks, channels, struct with Next() function."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888855453,
        "id": "6b61260f-de19-4d8e-9395-86cdad39b5a9",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888855453,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "type": "text",
        "version": 4
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888832693,
        "id": "03216ef2-f405-49e8-8d1b-156dea2e51ab",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888855116,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Iteration is a frequent need, be it iterating over lines of a file, results or of "
            ],
            [
              "SELECT",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " SQL query or files in a directory."
            ]
          ]
        },
        "type": "text",
        "version": 8,
        "inline_content": [
          {
            "Text": "Iteration is a frequent need, be it iterating over lines of a file, results or of "
          },
          {
            "Text": "SELECT",
            "AttrFlags": 2
          },
          {
            "Text": " SQL query or files in a directory."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786776,
        "id": "e0949943-34d5-4527-aaad-90186cdfc10e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786776,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There are 3 common iteration patterns in Go programs: * callbacks * an iterator object with "
            ],
            [
              "Next()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " method * channels"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There are 3 common iteration patterns in Go programs: * callbacks * an iterator object with "
          },
          {
            "Text": "Next()",
            "AttrFlags": 2
          },
          {
            "Text": " method * channels"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786776,
        "id": "f3763724-66a1-453d-97f9-bc6eba7fcb05",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786776,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Iteration mixed with processing"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Iteration mixed with processing"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786776,
        "id": "d5c8cb8b-172f-4c00-b3ee-128778548074",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786776,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Before discussing different ways of designing iteration API, let’s see how we would iterate without encapsulating iteration logic."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Before discussing different ways of designing iteration API, let’s see how we would iterate without encapsulating iteration logic."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786777,
        "id": "0f10e565-7d86-47c7-bdca-db4fddee49ae",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786777,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Our example is iterating over even numbers, starting with 2 up to a given "
            ],
            [
              "max",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " number (inclusive)."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Our example is iterating over even numbers, starting with 2 up to a given "
          },
          {
            "Text": "max",
            "AttrFlags": 2
          },
          {
            "Text": " number (inclusive)."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786777,
        "id": "d422fc8a-84ce-4ee5-91e9-328a00633af7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786777,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "To show handling of errors we’ll consider "
            ],
            [
              "max",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " less than 0 to be invalid."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "To show handling of errors we’ll consider "
          },
          {
            "Text": "max",
            "AttrFlags": 2
          },
          {
            "Text": " less than 0 to be invalid."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786778,
        "id": "10ac40d9-ceee-4665-9931-fe5a856f574b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786778,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is intentionally the simplest possible iterator so that we can focus on the implementation of the iterator API and not generating the values to iterate over."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is intentionally the simplest possible iterator so that we can focus on the implementation of the iterator API and not generating the values to iterate over."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786778,
        "id": "da9ea584-d9ef-49c7-abd0-27e427d944a7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786778,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Our processing is simple as well: we print the number."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Our processing is simple as well: we print the number."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786778,
        "id": "b5ce4e98-8597-4570-9754-64a2f1635dd1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786778,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here’s an example of iteration intertwined with processing."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here’s an example of iteration intertwined with processing."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786778,
        "id": "f593fc28-d7d2-4122-9b4a-d3429b4949df",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888964188,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "func printEvenNumbers(max int) {\n    if max \u003c 0 {\n        log.Fatalf(\"'max' is %d, should be \u003e= 0\", max)\n    }\n    for i := 2; i \u003c= max; i += 2 {\n        fmt.Printf(\"%d\\n\", i)\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "func printEvenNumbers(max int) {\n    if max \u003c 0 {\n        log.Fatalf(\"'max' is %d, should be \u003e= 0\", max)\n    }\n    for i := 2; i \u003c= max; i += 2 {\n        fmt.Printf(\"%d\\n\", i)\n    }\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786780,
        "id": "b753eb2b-154e-491b-ba85-61349ab99d93",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786780,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Full example: "
            ],
            [
              "3-ways-to-iterate/inlined.go",
              [
                [
                  "a",
                  "https://github.com/kjk/go-cookbook/blob/master/3-ways-to-iterate/inlined.go"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Full example: "
          },
          {
            "Text": "3-ways-to-iterate/inlined.go",
            "Link": "https://github.com/kjk/go-cookbook/blob/master/3-ways-to-iterate/inlined.go"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786780,
        "id": "893b7411-952e-4296-b6c9-4ae1b061985e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786780,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This is fine if iteration logic is simple. If our iteration was complex, like iterating over lines in a file, every time we needed to do different processing of the lines, we would end up copy \u0026 pasteing a lot of code."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This is fine if iteration logic is simple. If our iteration was complex, like iterating over lines in a file, every time we needed to do different processing of the lines, we would end up copy \u0026 pasteing a lot of code."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786780,
        "id": "d0afe73a-90ae-47aa-aeb3-ba642851fc3b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786780,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "For easy reuse we want to encapsulate complex iteration logic and provide simple API to callers."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "For easy reuse we want to encapsulate complex iteration logic and provide simple API to callers."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786780,
        "id": "0b27f433-13eb-4270-bfea-83114387e927",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786780,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Iterating via callback"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Iterating via callback"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786780,
        "id": "2d94790d-6012-4f52-be52-93ba7cbf2964",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786780,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The caller provides callback function to be called with each value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The caller provides callback function to be called with each value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786781,
        "id": "5f12114f-06a3-4cac-8699-11cc10f84d03",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786781,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Client side of iteration:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Client side of iteration:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786781,
        "id": "53d8eba0-2030-4f92-9e8b-1d3e8534c19a",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888960577,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "func printEvenNumbers(max int) {\n    err := iterateEvenNumbers(max, func(n int) error {\n        fmt.Printf(\"%d\\n\", n)\n        return nil\n    })\n    if err != nil {\n        log.Fatalf(\"error: %s\\n\", err)\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "func printEvenNumbers(max int) {\n    err := iterateEvenNumbers(max, func(n int) error {\n        fmt.Printf(\"%d\\n\", n)\n        return nil\n    })\n    if err != nil {\n        log.Fatalf(\"error: %s\\n\", err)\n    }\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786781,
        "id": "cfab79ca-4172-42a1-93b3-01302e898689",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786781,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We need a way to stop iteration from within the callback which is why the callback returns an "
            ],
            [
              "error",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". Returning non-nil "
            ],
            [
              "error",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " from callback stops iteration."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We need a way to stop iteration from within the callback which is why the callback returns an "
          },
          {
            "Text": "error",
            "AttrFlags": 2
          },
          {
            "Text": ". Returning non-nil "
          },
          {
            "Text": "error",
            "AttrFlags": 2
          },
          {
            "Text": " from callback stops iteration."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786781,
        "id": "a957be6e-c3c7-40ac-bf52-7fa42a0c84b3",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786781,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Implementation of iterator:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Implementation of iterator:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786781,
        "id": "bde85d9e-e119-42ef-b5c0-31430af0e53e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888958200,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "func iterateEvenNumbers(max int, cb func(n int) error) error {\n    if max \u003c 0 {\n        return fmt.Errorf(\"'max' is %d, must be \u003e= 0\", max)\n    }\n    for i := 2; i \u003c= max; i += 2 {\n        err := cb(i)\n        if err != nil {\n            return err\n        }\n    }\n    return nil\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "func iterateEvenNumbers(max int, cb func(n int) error) error {\n    if max \u003c 0 {\n        return fmt.Errorf(\"'max' is %d, must be \u003e= 0\", max)\n    }\n    for i := 2; i \u003c= max; i += 2 {\n        err := cb(i)\n        if err != nil {\n            return err\n        }\n    }\n    return nil\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786782,
        "id": "dc03a541-d477-4b09-9846-d0a4ab4a3485",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786782,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Full example: "
            ],
            [
              "3-ways-to-iterate/callback.go",
              [
                [
                  "a",
                  "https://github.com/kjk/go-cookbook/blob/master/3-ways-to-iterate/callback.go"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Full example: "
          },
          {
            "Text": "3-ways-to-iterate/callback.go",
            "Link": "https://github.com/kjk/go-cookbook/blob/master/3-ways-to-iterate/callback.go"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786783,
        "id": "7258c037-37ad-4355-a28f-557334e062c0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786783,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This pattern is used in "
            ],
            [
              "filepath.Walk",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://golang.org/pkg/path/filepath/#Walk"
                ]
              ]
            ],
            [
              " API in standard library."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "This pattern is used in "
          },
          {
            "Text": "filepath.Walk",
            "AttrFlags": 2,
            "Link": "https://golang.org/pkg/path/filepath/#Walk"
          },
          {
            "Text": " API in standard library."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786784,
        "id": "46aa9e0c-2226-4f89-bfa3-28d4720d63dc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786784,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Iterating with "
            ],
            [
              "Next()",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Iterating with "
          },
          {
            "Text": "Next()",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786784,
        "id": "e3bfd44f-e175-4c38-9933-03e258c649fc",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786784,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Another pattern is to implement iterator struct with 3 functions: * "
            ],
            [
              "Next()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " advances iterator to next value. It returns false to indicate end of iteration (which can be due to error) * "
            ],
            [
              "Value()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to get the current value of the iterator. The name depends on the kind of value we retrieve * optional "
            ],
            [
              "Err()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " function which returns iteration error"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Another pattern is to implement iterator struct with 3 functions: * "
          },
          {
            "Text": "Next()",
            "AttrFlags": 2
          },
          {
            "Text": " advances iterator to next value. It returns false to indicate end of iteration (which can be due to error) * "
          },
          {
            "Text": "Value()",
            "AttrFlags": 2
          },
          {
            "Text": " to get the current value of the iterator. The name depends on the kind of value we retrieve * optional "
          },
          {
            "Text": "Err()",
            "AttrFlags": 2
          },
          {
            "Text": " function which returns iteration error"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786784,
        "id": "185bc3d8-0d0b-4835-97f9-9c40e32891d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786784,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Client code:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Client code:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786784,
        "id": "467eeb74-6ff7-45d4-9527-cff0ec686245",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888950178,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "func printEvenNumbers(max int) {\n    iter := NewEvenNumberIterator(max)\n    for iter.Next() {\n        fmt.Printf(\"n: %d\\n\", iter.Value())\n    }\n    if iter.Err() != nil {\n        log.Fatalf(\"error: %s\\n\", iter.Err())\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "func printEvenNumbers(max int) {\n    iter := NewEvenNumberIterator(max)\n    for iter.Next() {\n        fmt.Printf(\"n: %d\\n\", iter.Value())\n    }\n    if iter.Err() != nil {\n        log.Fatalf(\"error: %s\\n\", iter.Err())\n    }\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786785,
        "id": "ba751519-e980-467f-8183-f94fab325ae0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786785,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Notice how "
            ],
            [
              "Next()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " fits nicely with "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop thanks to returning bool and indicating end of iteration with "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Notice how "
          },
          {
            "Text": "Next()",
            "AttrFlags": 2
          },
          {
            "Text": " fits nicely with "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loop thanks to returning bool and indicating end of iteration with "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786786,
        "id": "9e80f68a-3ffb-4eaa-a266-c9b581807e85",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786786,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Unfortunately, the nice API on the caller side requires complicated implementation of the iterator."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Unfortunately, the nice API on the caller side requires complicated implementation of the iterator."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786786,
        "id": "985cb1dd-6f3e-44e4-97e5-d8f0f16ea0a6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786786,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We need to carry state across "
            ],
            [
              "Next()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " calls and remember iteration errors:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We need to carry state across "
          },
          {
            "Text": "Next()",
            "AttrFlags": 2
          },
          {
            "Text": " calls and remember iteration errors:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786786,
        "id": "73b03091-d6a4-4817-b48f-68ee464be22b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888900623,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "// EvenNumberIterator generates even numbers\ntype EvenNumberIterator struct {\n    max       int\n    currValue int\n    err       error\n}\n\n// NewEvenNumberIterator creates new number iterator\nfunc NewEvenNumberIterator(max int) *EvenNumberIterator {\n    var err error\n    if max \u003c 0 {\n        err = fmt.Errorf(\"'max' is %d, should be \u003e= 0\", max)\n    }\n    return \u0026EvenNumberIterator{\n        max:       max,\n        currValue: 0,\n        err:       err,\n    }\n}\n\n// Next advances to next even number. Returns false on end of iteration.\nfunc (i *EvenNumberIterator) Next() bool {\n    if i.err != nil {\n        return false\n    }\n    i.currValue += 2\n    return i.currValue \u003c= i.max\n}\n\n// Value returns current even number\nfunc (i *EvenNumberIterator) Value() int {\n    if i.err != nil || i.currValue \u003e i.max {\n        panic(\"Value is not valid after iterator finished\")\n    }\n    return i.currValue\n}\n\n// Err returns iteration error.\nfunc (i *EvenNumberIterator) Err() error {\n    return i.err\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "// EvenNumberIterator generates even numbers\ntype EvenNumberIterator struct {\n    max       int\n    currValue int\n    err       error\n}\n\n// NewEvenNumberIterator creates new number iterator\nfunc NewEvenNumberIterator(max int) *EvenNumberIterator {\n    var err error\n    if max \u003c 0 {\n        err = fmt.Errorf(\"'max' is %d, should be \u003e= 0\", max)\n    }\n    return \u0026EvenNumberIterator{\n        max:       max,\n        currValue: 0,\n        err:       err,\n    }\n}\n\n// Next advances to next even number. Returns false on end of iteration.\nfunc (i *EvenNumberIterator) Next() bool {\n    if i.err != nil {\n        return false\n    }\n    i.currValue += 2\n    return i.currValue \u003c= i.max\n}\n\n// Value returns current even number\nfunc (i *EvenNumberIterator) Value() int {\n    if i.err != nil || i.currValue \u003e i.max {\n        panic(\"Value is not valid after iterator finished\")\n    }\n    return i.currValue\n}\n\n// Err returns iteration error.\nfunc (i *EvenNumberIterator) Err() error {\n    return i.err\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786787,
        "id": "1d84b14b-903c-4226-976f-20d8b34ab503",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786787,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Full example: "
            ],
            [
              "3-ways-to-iterate/next.go",
              [
                [
                  "a",
                  "https://github.com/kjk/go-cookbook/blob/master/3-ways-to-iterate/next.go"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Full example: "
          },
          {
            "Text": "3-ways-to-iterate/next.go",
            "Link": "https://github.com/kjk/go-cookbook/blob/master/3-ways-to-iterate/next.go"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786788,
        "id": "bfe3f127-69ac-4423-9d78-fc63b0aab5c8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888903927,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Notes:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Notes:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888903927,
        "id": "700fec6a-6c6a-4e63-895d-a4a5ee9398d0",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888909096,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "this method requires the largest amount of boilerplate"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 21,
        "inline_content": [
          {
            "Text": "this method requires the largest amount of boilerplate"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888909096,
        "id": "d7b2f73a-8078-4541-9d7e-e60e15f6d386",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888913552,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Next()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " should return "
            ],
            [
              "false",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " if there was an error"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 14,
        "inline_content": [
          {
            "Text": "Next()",
            "AttrFlags": 2
          },
          {
            "Text": " should return "
          },
          {
            "Text": "false",
            "AttrFlags": 2
          },
          {
            "Text": " if there was an error"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888913552,
        "id": "d09a6f61-eb6a-4b9a-8fd1-0f7a5782e55c",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888914974,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Value()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " panics if accessed after iteration has finished"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 12,
        "inline_content": [
          {
            "Text": "Value()",
            "AttrFlags": 2
          },
          {
            "Text": " panics if accessed after iteration has finished"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786792,
        "id": "56e7a791-8826-4a70-b71a-c1f47ca445ab",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888925068,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This pattern is used in standard library:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "This pattern is used in standard library:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888925068,
        "id": "490c42a3-acc3-46c9-9a4c-a83e814a0a4c",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888934693,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Rows.Next",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://golang.org/pkg/database/sql/#Rows.Next"
                ]
              ]
            ],
            [
              " to iterate over results of SQL "
            ],
            [
              "SELECT",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " statement"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 21,
        "inline_content": [
          {
            "Text": "Rows.Next",
            "AttrFlags": 2,
            "Link": "https://golang.org/pkg/database/sql/#Rows.Next"
          },
          {
            "Text": " to iterate over results of SQL "
          },
          {
            "Text": "SELECT",
            "AttrFlags": 2
          },
          {
            "Text": " statement"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888934693,
        "id": "3e6d1ae3-be87-4a72-bc20-a0679987afa3",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888939146,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Scanner.Scan",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://golang.org/pkg/go/scanner/#Scanner.Scan"
                ]
              ]
            ],
            [
              " to iterate over text"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 14,
        "inline_content": [
          {
            "Text": "Scanner.Scan",
            "AttrFlags": 2,
            "Link": "https://golang.org/pkg/go/scanner/#Scanner.Scan"
          },
          {
            "Text": " to iterate over text"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888939146,
        "id": "d72b86c1-7a03-4ede-a7ca-1c5159300627",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888942841,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Decoder.Token",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://golang.org/pkg/encoding/xml/#Decoder.Token"
                ]
              ]
            ],
            [
              " for XML parsing"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 14,
        "inline_content": [
          {
            "Text": "Decoder.Token",
            "AttrFlags": 2,
            "Link": "https://golang.org/pkg/encoding/xml/#Decoder.Token"
          },
          {
            "Text": " for XML parsing"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888942841,
        "id": "e87dfaa5-9044-4d12-b16c-b1d3e3f05627",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888943785,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Reader.Read",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://golang.org/pkg/encoding/csv/#Reader.Read"
                ]
              ]
            ],
            [
              " in CSV reader"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 12,
        "inline_content": [
          {
            "Text": "Reader.Read",
            "AttrFlags": 2,
            "Link": "https://golang.org/pkg/encoding/csv/#Reader.Read"
          },
          {
            "Text": " in CSV reader"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786793,
        "id": "142f1dd4-819c-4a84-925c-53f9eb9f3e32",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786793,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Some of those iterators combine "
            ],
            [
              "Next()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and "
            ],
            [
              "Value()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " into a single function returning multiple values."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Some of those iterators combine "
          },
          {
            "Text": "Next()",
            "AttrFlags": 2
          },
          {
            "Text": " and "
          },
          {
            "Text": "Value()",
            "AttrFlags": 2
          },
          {
            "Text": " into a single function returning multiple values."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786793,
        "id": "581888bf-69e8-402e-b9af-4ac1be293bda",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786793,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Iterating with a channel"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Iterating with a channel"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786793,
        "id": "bf58432a-1f5b-42a8-bb28-29ebe5647873",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786793,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Channels and goroutines are Go’s banner features and can be used as iterators."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Channels and goroutines are Go’s banner features and can be used as iterators."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786793,
        "id": "f37cc17c-f6d4-476e-aa8a-f60e67700b92",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786793,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Caller side:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Caller side:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786793,
        "id": "419a6d4b-95b1-414d-938b-ba3c8a3070d7",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888897256,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "func printEvenNumbers(max int) {\n    for val := range generateEvenNumbers(max) {\n        if val.Err != nil {\n            log.Fatalf(\"Error: %s\\n\", val.Err)\n        }\n        fmt.Printf(\"%d\\n\", val.Int)\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "func printEvenNumbers(max int) {\n    for val := range generateEvenNumbers(max) {\n        if val.Err != nil {\n            log.Fatalf(\"Error: %s\\n\", val.Err)\n        }\n        fmt.Printf(\"%d\\n\", val.Int)\n    }\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786793,
        "id": "fa6ba0c2-2845-475a-b8c4-7dd277b662cd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786793,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "generateEvenNumbers()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " returns a channel which will be closed to indicate end of iteration. Closing the channel ends "
            ],
            [
              "for",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " loop."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "generateEvenNumbers()",
            "AttrFlags": 2
          },
          {
            "Text": " returns a channel which will be closed to indicate end of iteration. Closing the channel ends "
          },
          {
            "Text": "for",
            "AttrFlags": 2
          },
          {
            "Text": " loop."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786794,
        "id": "7f620bc8-fd48-4dd7-87b8-89396f042174",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786794,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If there is no possibility of failing we can send just values over the channel."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If there is no possibility of failing we can send just values over the channel."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786794,
        "id": "c74c6ed1-065f-4d2d-85ad-ad3ea7428909",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786794,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In our case a failure is possiblity, so we have to send a struct that packages the value and possible error:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In our case a failure is possiblity, so we have to send a struct that packages the value and possible error:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786794,
        "id": "deb80a56-62db-4681-8f23-6390e6c5abb1",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888893443,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "type IntWithError struct {\n    Int int\n    Err error\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "type IntWithError struct {\n    Int int\n    Err error\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786794,
        "id": "49d200e0-7ba8-470f-9d3e-3764f3798562",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786794,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Generator side:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Generator side:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786794,
        "id": "1858d145-61b7-4410-ba34-130e3e929c52",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786794,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Plain Text"
            ]
          ],
          "title": [
            [
              "func generateEvenNumbers(max int) chan IntWithError {\n    ch := make(chan IntWithError)\n    go func() {\n        defer close(ch)\n        if max \u003c 0 {\n            ch \u003c- IntWithError{\n                Err: fmt.Errorf(\"'max' is %d and should be \u003e= 0\", max),\n            }\n            return\n        }\n\n        for i := 2; i \u003c= max; i += 2 {\n            ch \u003c- IntWithError{\n                Int: i,\n            }\n        }\n    }()\n    return ch\n}"
            ]
          ]
        },
        "type": "code",
        "version": 1,
        "code": "func generateEvenNumbers(max int) chan IntWithError {\n    ch := make(chan IntWithError)\n    go func() {\n        defer close(ch)\n        if max \u003c 0 {\n            ch \u003c- IntWithError{\n                Err: fmt.Errorf(\"'max' is %d and should be \u003e= 0\", max),\n            }\n            return\n        }\n\n        for i := 2; i \u003c= max; i += 2 {\n            ch \u003c- IntWithError{\n                Int: i,\n            }\n        }\n    }()\n    return ch\n}",
        "code_language": "Plain Text"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786795,
        "id": "1988edad-ecb7-4ffd-b5f8-036d3d2066e0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786795,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Full example: "
            ],
            [
              "3-ways-to-iterate/channel.go",
              [
                [
                  "a",
                  "https://github.com/kjk/go-cookbook/blob/master/3-ways-to-iterate/channel.go"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Full example: "
          },
          {
            "Text": "3-ways-to-iterate/channel.go",
            "Link": "https://github.com/kjk/go-cookbook/blob/master/3-ways-to-iterate/channel.go"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786795,
        "id": "25d6f11b-39e5-4e48-a487-ba7d2e957f4f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786795,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We could use buffered channel, e.g.: "
            ],
            [
              "ch := make(chan IntWithError, 128)",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              ". That would speed up things if both generation and processing are time consuming by parallelizing those 2 processes."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We could use buffered channel, e.g.: "
          },
          {
            "Text": "ch := make(chan IntWithError, 128)",
            "AttrFlags": 2
          },
          {
            "Text": ". That would speed up things if both generation and processing are time consuming by parallelizing those 2 processes."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786796,
        "id": "a2542ba1-07be-47f3-a116-654c0e100083",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786796,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Adding cancellation to channel-based iterator"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Adding cancellation to channel-based iterator"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786796,
        "id": "5515be7a-a23c-4198-8a53-3e873ddc943c",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786796,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In the above example the client doesn’t have a way to stop the channel-based iterator."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In the above example the client doesn’t have a way to stop the channel-based iterator."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786796,
        "id": "bfc94590-0a31-42c4-8b58-4993da13e106",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786796,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "If it just stops processing values from the channel before it’s closed, the generator goroutine will be forever blocked trying to send on a channel no-one is reading from. The goroutine will leak."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "If it just stops processing values from the channel before it’s closed, the generator goroutine will be forever blocked trying to send on a channel no-one is reading from. The goroutine will leak."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786796,
        "id": "76cf46dc-962f-428c-9b49-c0d0baf90c5d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786796,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We can add ability to stop a channel iterator by using "
            ],
            [
              "context",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " created with "
            ],
            [
              "context.WithCancel",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We can add ability to stop a channel iterator by using "
          },
          {
            "Text": "context",
            "AttrFlags": 2
          },
          {
            "Text": " created with "
          },
          {
            "Text": "context.WithCancel",
            "AttrFlags": 2
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786796,
        "id": "81e5afa5-0241-4a14-bb4a-a76af183bb3b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786796,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here’s slightly modified generator function:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here’s slightly modified generator function:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786796,
        "id": "e0bfb95c-b395-4066-83a6-cab8a648e4f0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888882834,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "func generateEvenNumbers(ctx context.Context, max int) chan IntWithError {\n    ch := make(chan IntWithError)\n    go func() {\n        defer close(ch)\n        if max \u003c 0 {\n            ch \u003c- IntWithError{\n                Err: fmt.Errorf(\"'max' is %d and should be \u003e= 0\", max),\n            }\n            return\n        }\n\n        for i := 2; i \u003c= max; i += 2 {\n            if ctx != nil {\n                // if context was cancelled, we stop early\n                select {\n                case \u003c-ctx.Done():\n                    return\n                default:\n                }\n            }\n            ch \u003c- IntWithError{\n                Int: i,\n            }\n        }\n    }()\n    return ch\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "func generateEvenNumbers(ctx context.Context, max int) chan IntWithError {\n    ch := make(chan IntWithError)\n    go func() {\n        defer close(ch)\n        if max \u003c 0 {\n            ch \u003c- IntWithError{\n                Err: fmt.Errorf(\"'max' is %d and should be \u003e= 0\", max),\n            }\n            return\n        }\n\n        for i := 2; i \u003c= max; i += 2 {\n            if ctx != nil {\n                // if context was cancelled, we stop early\n                select {\n                case \u003c-ctx.Done():\n                    return\n                default:\n                }\n            }\n            ch \u003c- IntWithError{\n                Int: i,\n            }\n        }\n    }()\n    return ch\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786798,
        "id": "5e70bdaa-2544-490b-b7c7-e6461ba4bbde",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786798,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Full example: "
            ],
            [
              "3-ways-to-iterate/channel-cancellable.go",
              [
                [
                  "a",
                  "https://github.com/kjk/go-cookbook/blob/master/3-ways-to-iterate/channel-cancellable.go"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Full example: "
          },
          {
            "Text": "3-ways-to-iterate/channel-cancellable.go",
            "Link": "https://github.com/kjk/go-cookbook/blob/master/3-ways-to-iterate/channel-cancellable.go"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786798,
        "id": "75d153f0-2356-482a-8ea1-5b2ea4899865",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786798,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Here’s a user of the above code that stops the generator a bit early:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Here’s a user of the above code that stops the generator a bit early:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786798,
        "id": "e3f1f4bd-ba75-4c9d-943c-28aeea34c316",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888875713,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "func printEvenNumbersCancellable(max int, stopAt int) {\n    ctx, cancel := context.WithCancel(context.Background())\n    defer cancel()\n    ch := generateEvenNumbers(ctx, max)\n    for val := range ch {\n        if val.Err != nil {\n            log.Fatalf(\"Error: %s\\n\", val.Err)\n        }\n        if val.Int \u003e stopAt {\n            cancel()\n            // notice we keep going in order to drain the channel\n            continue\n        }\n        // process the value\n        fmt.Printf(\"%d\\n\", val.Int)\n    }\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "func printEvenNumbersCancellable(max int, stopAt int) {\n    ctx, cancel := context.WithCancel(context.Background())\n    defer cancel()\n    ch := generateEvenNumbers(ctx, max)\n    for val := range ch {\n        if val.Err != nil {\n            log.Fatalf(\"Error: %s\\n\", val.Err)\n        }\n        if val.Int \u003e stopAt {\n            cancel()\n            // notice we keep going in order to drain the channel\n            continue\n        }\n        // process the value\n        fmt.Printf(\"%d\\n\", val.Int)\n    }\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786799,
        "id": "e6361372-45cb-4903-977b-e6e756f598c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786799,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Important to note:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Important to note:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786803,
        "id": "9a201da9-1a11-4ad9-a5a8-ab3256ed72fa",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786803,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "we must call "
            ],
            [
              "cancel()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " on the context we get from "
            ],
            [
              "context.WithCancel()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " or else it’ll leak"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "we must call "
          },
          {
            "Text": "cancel()",
            "AttrFlags": 2
          },
          {
            "Text": " on the context we get from "
          },
          {
            "Text": "context.WithCancel()",
            "AttrFlags": 2
          },
          {
            "Text": " or else it’ll leak"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786804,
        "id": "008c89be-b96e-488b-a80b-372224bc21a9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786804,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "it’s safe to call "
            ],
            [
              "cancel()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " multiple times"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "it’s safe to call "
          },
          {
            "Text": "cancel()",
            "AttrFlags": 2
          },
          {
            "Text": " multiple times"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786804,
        "id": "c0f1f70d-5fb9-48f1-8429-ef8025a7a53b",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786804,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "cancel()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " asks for the generator to stop but cannot guarantee it. After cancelling we’ll get more values queued on the channel"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "cancel()",
            "AttrFlags": 2
          },
          {
            "Text": " asks for the generator to stop but cannot guarantee it. After cancelling we’ll get more values queued on the channel"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786804,
        "id": "c1de6baf-c9fe-4370-9c53-5f9c86593603",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786804,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It’s important to fully drain the channel or else we’ll leak the goroutine that is trying to write to it. In this example we skip processing after reaching stop value."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It’s important to fully drain the channel or else we’ll leak the goroutine that is trying to write to it. In this example we skip processing after reaching stop value."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786805,
        "id": "e96afea4-227c-438c-9e81-b600adfc78ed",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786805,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Alternatively, we could break the processing loop and then have a loop just to drain the channel:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Alternatively, we could break the processing loop and then have a loop just to drain the channel:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786806,
        "id": "24abdf57-630d-4a21-a5d8-3d37f87a4d8d",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888870704,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "for _ = range ch {\n}"
            ]
          ]
        },
        "type": "code",
        "version": 11,
        "code": "for _ = range ch {\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786806,
        "id": "a803f06c-8d1a-4caf-a05e-32728612cfe5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786806,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Which way is the best?"
            ]
          ]
        },
        "type": "sub_header",
        "version": 1,
        "inline_content": [
          {
            "Text": "Which way is the best?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786806,
        "id": "7ec4cfb0-3f11-494f-8a63-fcff70955cc9",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786806,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The one that best fits your scenario."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The one that best fits your scenario."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786806,
        "id": "747a026f-b3a8-49c5-a705-f7bed851dcb5",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786806,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The callback pattern makes for a simple implementation of the iterator but callbacks in Go have akward syntax."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The callback pattern makes for a simple implementation of the iterator but callbacks in Go have akward syntax."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786807,
        "id": "c09c256b-ba59-4ac6-9e59-d14c6851d326",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786807,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Using "
            ],
            [
              "Next()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the hardest to implement but presents nice interface to the caller. It’s most commonly used in Go standard library for complex iterators."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Using "
          },
          {
            "Text": "Next()",
            "AttrFlags": 2
          },
          {
            "Text": " is the hardest to implement but presents nice interface to the caller. It’s most commonly used in Go standard library for complex iterators."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786808,
        "id": "e92ffd64-e9b5-4b97-916a-ee09e473a311",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786808,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Channel-based iterator is easy to implent and use by the caller but most expensive. Only in exceptional circumstances the cost should be of concern."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Channel-based iterator is easy to implent and use by the caller but most expensive. Only in exceptional circumstances the cost should be of concern."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786808,
        "id": "aa592d14-9e90-424d-b601-a84b0dcb1249",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786808,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It’s also the only one that is concurrent by nature."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It’s also the only one that is concurrent by nature."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786809,
        "id": "382191d9-f927-402d-bb91-cda0ebb80467",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786809,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "At the same time, channels are heavy machinery. Don’t over-use them, don’t use channels for things that can be done without them."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "At the same time, channels are heavy machinery. Don’t over-use them, don’t use channels for things that can be done without them."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786810,
        "id": "f0b689ae-c613-4bad-956c-bb1a7439624e",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888786810,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Channels are meant to serve as a coordination mechanism between goroutines. If you don’t need to launch a goroutine, then you probably don’t need to use channels."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Channels are meant to serve as a coordination mechanism between goroutines. If you don’t need to launch a goroutine, then you probably don’t need to use channels."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888786810,
        "id": "116b7b6b-ff9c-471b-a841-177fca9c4fa4",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531971207421,
        "parent_id": "da74af7a-3096-4880-8249-be7a79fc8156",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Code for this chapter: "
            ],
            [
              "https://github.com/kjk/go-cookbook/tree/master/3-ways-to-iterate",
              [
                [
                  "a",
                  "https://github.com/kjk/go-cookbook/tree/master/3-ways-to-iterate"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 7,
        "inline_content": [
          {
            "Text": "Code for this chapter: "
          },
          {
            "Text": "https://github.com/kjk/go-cookbook/tree/master/3-ways-to-iterate",
            "Link": "https://github.com/kjk/go-cookbook/tree/master/3-ways-to-iterate"
          }
        ]
      }
    ],
    "title": "3 ways to iterate in Go",
    "format_page": {
      "page_cover": "https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c4bfc136-2fdb-4e47-bc21-51698592fd00/header-09.jpg",
      "page_cover_position": 0.5,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true,
      "page_cover_url": "https://www.notion.so/image/https:%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fc4bfc136-2fdb-4e47-bc21-51698592fd00%2Fheader-09.jpg"
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 18
    }
  ],
  "Tables": null
}