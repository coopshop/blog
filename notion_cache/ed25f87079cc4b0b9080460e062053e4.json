{
  "ID": "ed25f870-79cc-4b0b-9080-460e062053e4",
  "Root": {
    "alive": true,
    "content": [
      "fedb646f-0618-4c4f-ae70-171310cf39c0",
      "5d707574-6072-413c-b145-cea3216ad6e2",
      "9335cd0e-41fe-4f14-8958-e0f390da9aa6",
      "6b7a73e0-823f-4358-9762-97b8288431db",
      "aa5df761-1dd9-404a-89fd-a73d1d4b93b9",
      "54b039a6-e3da-4157-949e-07d2c7849833",
      "fd534628-847d-48f2-aaad-d41ce39353e4",
      "06c0510c-e904-4d41-bd9d-27080d3882c7",
      "15dc6fbe-cce2-4ef7-a8f9-53c445787291",
      "664ac62c-5c77-4f77-bf43-7ec7e64709b6",
      "76c8278d-eda8-4f2b-9d34-b9a941fe2edc",
      "0dd65257-0f90-4431-b6e9-b1f670781ed5",
      "61e83f32-f3d6-4f38-bc8c-1f17e65cf113",
      "552507d8-034c-4b18-ae36-cc1d245ba2f9",
      "bf46dcff-fb17-4fd0-913d-d287d3909baa",
      "e6e42675-23c7-4caf-9b3b-581409d7b53a",
      "4be24555-0742-4ad3-b67b-225046eddb3e",
      "48459a32-1f56-4b2a-b9d3-956774c02204",
      "c1ec93a6-4653-4c06-97bb-4a281a89efdd",
      "f72a2ed2-b84f-4bab-85bd-a854cba2e0e7",
      "1dea8f73-795f-4ec6-91ce-bd6f7160ad87",
      "6b98844d-66b0-4b00-895f-bf9b9e7db993",
      "35eee78f-7d8c-49b3-9074-8e6033c6564d",
      "e6b8d257-53b3-4908-a404-24dff86ba271",
      "2718c312-2432-4e3e-9732-cfbc8427c1f1",
      "1b42962b-37b6-41ec-82e7-63afc32ce4e3",
      "6243b4f3-8615-47a9-ac3f-19816f871151",
      "9a091f48-f01c-434d-9b8a-7bf44b4e03d5"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1512295773180,
    "format": {
      "page_full_width": true,
      "page_small_text": true
    },
    "id": "ed25f870-79cc-4b0b-9080-460e062053e4",
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1539490091371,
    "parent_id": "25a256f9-0ce4-4eb7-8839-0ecc3cf9cd65",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using MySQL in Docker for local testing in Python"
        ]
      ]
    },
    "type": "page",
    "version": 3,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807187,
        "id": "fedb646f-0618-4c4f-ae70-171310cf39c0",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807187,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "type": "text",
        "version": 0
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "5d707574-6072-413c-b145-cea3216ad6e2",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Imagine you’re writing a web service that uses MySQL. You deploy on Linux but write code and test on Mac."
            ]
          ]
        },
        "type": "text",
        "version": 0,
        "inline_content": [
          {
            "Text": "Imagine you’re writing a web service that uses MySQL. You deploy on Linux but write code and test on Mac."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "9335cd0e-41fe-4f14-8958-e0f390da9aa6",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "What is a good way to setup a MySQL database for local testing?"
            ]
          ]
        },
        "type": "text",
        "version": 0,
        "inline_content": [
          {
            "Text": "What is a good way to setup a MySQL database for local testing?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "6b7a73e0-823f-4358-9762-97b8288431db",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can use "
            ],
            [
              "native MySQL installer",
              [
                [
                  "a",
                  "https://dev.mysql.com/downloads/mysql/"
                ]
              ]
            ],
            [
              " or install MySQL via "
            ],
            [
              "Homebrew",
              [
                [
                  "a",
                  "https://brew.sh/"
                ]
              ]
            ],
            [
              " but my favorite way is to use docker."
            ]
          ]
        },
        "type": "text",
        "version": 0,
        "inline_content": [
          {
            "Text": "You can use "
          },
          {
            "Text": "native MySQL installer",
            "Link": "https://dev.mysql.com/downloads/mysql/"
          },
          {
            "Text": " or install MySQL via "
          },
          {
            "Text": "Homebrew",
            "Link": "https://brew.sh/"
          },
          {
            "Text": " but my favorite way is to use docker."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "aa5df761-1dd9-404a-89fd-a73d1d4b93b9",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "With docker you can have multiple MySQL instances running and you can easily install exactly the same version of MySQL as the one in production. I’ve learned the hard way that using newer version for development can bite you."
            ]
          ]
        },
        "type": "text",
        "version": 0,
        "inline_content": [
          {
            "Text": "With docker you can have multiple MySQL instances running and you can easily install exactly the same version of MySQL as the one in production. I’ve learned the hard way that using newer version for development can bite you."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "54b039a6-e3da-4157-949e-07d2c7849833",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "One wrinkle in the scheme is that you have to make sure that the database container is running, get the ip address of docker instance and port on which the database is listening on."
            ]
          ]
        },
        "type": "text",
        "version": 0,
        "inline_content": [
          {
            "Text": "One wrinkle in the scheme is that you have to make sure that the database container is running, get the ip address of docker instance and port on which the database is listening on."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "fd534628-847d-48f2-aaad-d41ce39353e4",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Doing this manually would be annoying and I like to automate. I wrote a re-usable script that ensures MySQL docker instance is running and then passes database ip address/port to the program."
            ]
          ]
        },
        "type": "text",
        "version": 0,
        "inline_content": [
          {
            "Text": "Doing this manually would be annoying and I like to automate. I wrote a re-usable script that ensures MySQL docker instance is running and then passes database ip address/port to the program."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "06c0510c-e904-4d41-bd9d-27080d3882c7",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It’s just a matter of running docker commands and parsing their outputs but it’s difficult enough to worth sharing the complete solution."
            ]
          ]
        },
        "type": "text",
        "version": 0,
        "inline_content": [
          {
            "Text": "It’s just a matter of running docker commands and parsing their outputs but it’s difficult enough to worth sharing the complete solution."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "15dc6fbe-cce2-4ef7-a8f9-53c445787291",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Conceptually, what we do is:"
            ]
          ]
        },
        "type": "text",
        "version": 0,
        "inline_content": [
          {
            "Text": "Conceptually, what we do is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "664ac62c-5c77-4f77-bf43-7ec7e64709b6",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "run "
            ],
            [
              "docker ps -a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and parse the output. If the desired container is already running, parse ip address/port from the output and return that"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 0,
        "inline_content": [
          {
            "Text": "run "
          },
          {
            "Text": "docker ps -a",
            "AttrFlags": 2
          },
          {
            "Text": " and parse the output. If the desired container is already running, parse ip address/port from the output and return that"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "76c8278d-eda8-4f2b-9d34-b9a941fe2edc",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "if the container is stopped, re-start it with "
            ],
            [
              "docker start",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 0,
        "inline_content": [
          {
            "Text": "if the container is stopped, re-start it with "
          },
          {
            "Text": "docker start",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "0dd65257-0f90-4431-b6e9-b1f670781ed5",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "otherwise start it with "
            ],
            [
              "docker run",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 0,
        "inline_content": [
          {
            "Text": "otherwise start it with "
          },
          {
            "Text": "docker run",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "61e83f32-f3d6-4f38-bc8c-1f17e65cf113",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "MySQL database is stored in a mounted directory so that it persists even if the container is stopped."
            ]
          ]
        },
        "type": "text",
        "version": 0,
        "inline_content": [
          {
            "Text": "MySQL database is stored in a mounted directory so that it persists even if the container is stopped."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "552507d8-034c-4b18-ae36-cc1d245ba2f9",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The script is very re-usable. You can customize it by changing:"
            ]
          ]
        },
        "type": "text",
        "version": 0,
        "inline_content": [
          {
            "Text": "The script is very re-usable. You can customize it by changing:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "bf46dcff-fb17-4fd0-913d-d287d3909baa",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "the base MySQL container ("
            ],
            [
              "mysql:5.6",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " in my case)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 0,
        "inline_content": [
          {
            "Text": "the base MySQL container ("
          },
          {
            "Text": "mysql:5.6",
            "AttrFlags": 2
          },
          {
            "Text": " in my case)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "e6e42675-23c7-4caf-9b3b-581409d7b53a",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "where MySQL data is stored"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 0,
        "inline_content": [
          {
            "Text": "where MySQL data is stored"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "4be24555-0742-4ad3-b67b-225046eddb3e",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "name of the container, which should by unique for the project"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 0,
        "inline_content": [
          {
            "Text": "name of the container, which should by unique for the project"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "48459a32-1f56-4b2a-b9d3-956774c02204",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "port on which the database is exposed locally (in the container MySQL listens on standard port 3306, it must be exposed locally on a unique port)"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 0,
        "inline_content": [
          {
            "Text": "port on which the database is exposed locally (in the container MySQL listens on standard port 3306, it must be exposed locally on a unique port)"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "c1ec93a6-4653-4c06-97bb-4a281a89efdd",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "This can be adapted for other databases, like PostgreSQL."
            ]
          ]
        },
        "type": "text",
        "version": 0,
        "inline_content": [
          {
            "Text": "This can be adapted for other databases, like PostgreSQL."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "f72a2ed2-b84f-4bab-85bd-a854cba2e0e7",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Implementation in Python"
            ]
          ]
        },
        "type": "sub_header",
        "version": 0,
        "inline_content": [
          {
            "Text": "Implementation in Python"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "1dea8f73-795f-4ec6-91ce-bd6f7160ad87",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Python scripts works a bit differently in that it extracts ip address of the docker instance and port on which MySQL is listening and writes this information to stdout. We can parse its output in "
            ],
            [
              "run.sh",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and pass it to arbitrary program."
            ]
          ]
        },
        "type": "text",
        "version": 0,
        "inline_content": [
          {
            "Text": "Python scripts works a bit differently in that it extracts ip address of the docker instance and port on which MySQL is listening and writes this information to stdout. We can parse its output in "
          },
          {
            "Text": "run.sh",
            "AttrFlags": 2
          },
          {
            "Text": " and pass it to arbitrary program."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "6b98844d-66b0-4b00-895f-bf9b9e7db993",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Let’s start with "
            ],
            [
              "run.sh",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " script that starts a local instance."
            ]
          ]
        },
        "type": "text",
        "version": 0,
        "inline_content": [
          {
            "Text": "Let’s start with "
          },
          {
            "Text": "run.sh",
            "AttrFlags": 2
          },
          {
            "Text": " script that starts a local instance."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "35eee78f-7d8c-49b3-9074-8e6033c6564d",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "#!/bin/bash\nset -u -e -o pipefail\n\n# ./start_docker.py writes '\u003cip_address\u003e:\u003cdb port\u003e' to stdout\nIFS=\\; read -a ip_port \u003c\u003c\u003c\"`./start_docker.py`\"\nip=\"${ip_port[0]}\"\nport=\"${ip_port[1]}\"\n\n./quicknotes -local -verbose -db-host ${ip} -db-port ${port} $@"
            ]
          ]
        },
        "type": "code",
        "version": 0,
        "code": "#!/bin/bash\nset -u -e -o pipefail\n\n# ./start_docker.py writes '\u003cip_address\u003e:\u003cdb port\u003e' to stdout\nIFS=\\; read -a ip_port \u003c\u003c\u003c\"`./start_docker.py`\"\nip=\"${ip_port[0]}\"\nport=\"${ip_port[1]}\"\n\n./quicknotes -local -verbose -db-host ${ip} -db-port ${port} $@"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "e6b8d257-53b3-4908-a404-24dff86ba271",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Assume that "
            ],
            [
              "./quicknotes",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " is the executable for the service."
            ]
          ]
        },
        "type": "text",
        "version": 0,
        "inline_content": [
          {
            "Text": "Assume that "
          },
          {
            "Text": "./quicknotes",
            "AttrFlags": 2
          },
          {
            "Text": " is the executable for the service."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "2718c312-2432-4e3e-9732-cfbc8427c1f1",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The real meat of the operation is "
            ],
            [
              "start_docker.py",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " script which checks if docker instance is already running. If not, it starts it."
            ]
          ]
        },
        "type": "text",
        "version": 0,
        "inline_content": [
          {
            "Text": "The real meat of the operation is "
          },
          {
            "Text": "start_docker.py",
            "AttrFlags": 2
          },
          {
            "Text": " script which checks if docker instance is already running. If not, it starts it."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "1b42962b-37b6-41ec-82e7-63afc32ce4e3",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "start-mysql-in-docker/start_docker.py",
              [
                [
                  "a",
                  "https://github.com/kjk/go-cookbook/blob/master/start-mysql-in-docker/start_docker.py"
                ]
              ]
            ],
            [
              ":"
            ]
          ]
        },
        "type": "text",
        "version": 0,
        "inline_content": [
          {
            "Text": "start-mysql-in-docker/start_docker.py",
            "Link": "https://github.com/kjk/go-cookbook/blob/master/start-mysql-in-docker/start_docker.py"
          },
          {
            "Text": ":"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "6243b4f3-8615-47a9-ac3f-19816f871151",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Python"
            ]
          ],
          "title": [
            [
              "#!/usr/local/bin/python3\n\nimport sys, os, os.path, time, subprocess\n\nkStatusRunning = \"running\"\nkStatusExited = \"exited\"\n\n# using https://hub.docker.com/_/mysql/\n# to use the latest mysql, use mysql:8\nimageName = \"mysql:5.6\"\n# name must be unique across containers runing on this computer\ncontainerName = \"mysql-db-multi\"\n# this is where mysql database files are stored, so that\n# they persist even if container goes away\ndbDir = os.path.expanduser(\"~/data/db-multi\")\n# 3306 is standard MySQL port, I use a unique port to be able\n# to run multiple mysql instances for different projects\ndockerDbLocalPort = \"7200\"\n\ndef eprint(*args, **kwargs):\n  print(*args, file=sys.stderr, **kwargs)\n\ndef print_cmd(cmd):\n  eprint(\"cmd:\" + \" \".join(cmd))\n\ndef run_cmd(cmd):\n  print_cmd(cmd)\n  res = subprocess.run(cmd, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n  eprint(res.stdout.decode('utf-8'))\n\ndef run_cmd_out(cmd):\n  print_cmd(cmd)\n  s = subprocess.check_output(cmd)\n  return s.decode(\"utf-8\")\n\ndef run_cmd_show_progress(cmd):\n  eprint(\"Running '%s'\" % cmd)\n  p = subprocess.Popen(cmd, stdout = subprocess.PIPE,\n          stderr = subprocess.STDOUT, shell = True)\n  while True:\n    line = p.stdout.readline()\n    if not line:\n      break\n    sys.stdout.buffer.write(line)\n    sys.stdout.flush()\n  #eprint(\"Finished runnign '%s'\" % \" \".join(cmd))\n\ndef verify_docker_running():\n  try:\n    run_cmd([\"docker\", \"ps\"])\n  except:\n    eprint(\"docker is not running! must run docker\")\n    sys.exit(10)\n\n# not sure if this covers all cases\ndef decode_status(status_verbose):\n  if \"Exited\" in status_verbose:\n    return kStatusExited\n  return kStatusRunning\n\n# given:\n# 0.0.0.0:7200-\u003e3306/tcp\n# return (0.0.0.0, 7200) or None if doesn't match\ndef decode_ip_port(mappings):\n  parts = mappings.split(\"-\u003e\")\n  if len(parts) != 2:\n    return None\n  parts = parts[0].split(\":\")\n  if len(parts) != 2:\n    return None\n  return parts\n\n# returns:\n#  - container id\n#  - status\n#  - (ip, port) in the host that maps to exposed port inside the container (or None)\n# returns (None, None, None) if no container of that name\ndef docker_container_info(containerName):\n  s = run_cmd_out([\"docker\", \"ps\", \"-a\", \"--format\", \"{{.ID}}|{{.Status}}|{{.Ports}}|{{.Names}}\"])\n  # this returns a line like:\n  # 6c5a934e00fb|Exited (0) 3 months ago|0.0.0.0:7200-\u003e3306/tcp|mysql-56-for-quicknotes\n  lines = s.split(\"\\n\")\n  for l in lines:\n    if len(l) == 0:\n      continue\n    parts = l.split(\"|\")\n    assert len(parts) == 4, \"parts: %s\" % parts\n    id, status, mappings, names = parts\n    if containerName in names:\n      status = decode_status(status)\n      ip_port = decode_ip_port(mappings)\n      return (id, status, ip_port)\n  return (None, None, None)\n\ndef wait_for_container(containerName):\n  # 8 secs is a heuristic\n  timeOut = 8\n  eprint(\"waiting %s secs for container to start\" % timeOut, end=\"\", flush=True)\n  while timeOut \u003e 0:\n    (containerId, status, ip_port) = docker_container_info(containerName)\n    if status == kStatusRunning:\n      return\n    eprint(\".\", end=\"\", flush=True)\n    time.sleep(1)\n    timeOut -= 1\n  eprint(\"\")\n\ndef start_container_if_needed(imageName, containerName, portMapping):\n  (containerId, status, ip_port) = docker_container_info(containerName)\n  if status == kStatusRunning:\n    eprint(\"container %s is already running\" % containerName)\n    return\n  if status == kStatusExited:\n    cmd = [\"docker\", \"start\", containerId]\n  else:\n    volumeMapping = \"%s:/var/lib/mysql\" % dbDir\n    cmd = [\"docker\", \"run\", \"-d\", \"--name=\" + containerName, \"-p\", portMapping, \"-v\", volumeMapping, \"-e\", \"MYSQL_ALLOW_EMPTY_PASSWORD=yes\", imageName]\n  run_cmd(cmd)\n  wait_for_container(containerName)\n\ndef create_db_dir():\n  try:\n    os.makedirs(dbDir)\n  except:\n    # throws if already exists, which is ok\n    pass\n\ndef main():\n  verify_docker_running()\n  create_db_dir()\n  start_container_if_needed(imageName, containerName, dockerDbLocalPort + \":3306\")\n  (containerId, status, ip_port) = docker_container_info(containerName)\n  assert ip_port is not None\n  ip, port = ip_port\n  print(\"%s;%s\" % (ip, port))\n\nif __name__ == \"__main__\":\n  main()"
            ]
          ]
        },
        "type": "code",
        "version": 0,
        "code": "#!/usr/local/bin/python3\n\nimport sys, os, os.path, time, subprocess\n\nkStatusRunning = \"running\"\nkStatusExited = \"exited\"\n\n# using https://hub.docker.com/_/mysql/\n# to use the latest mysql, use mysql:8\nimageName = \"mysql:5.6\"\n# name must be unique across containers runing on this computer\ncontainerName = \"mysql-db-multi\"\n# this is where mysql database files are stored, so that\n# they persist even if container goes away\ndbDir = os.path.expanduser(\"~/data/db-multi\")\n# 3306 is standard MySQL port, I use a unique port to be able\n# to run multiple mysql instances for different projects\ndockerDbLocalPort = \"7200\"\n\ndef eprint(*args, **kwargs):\n  print(*args, file=sys.stderr, **kwargs)\n\ndef print_cmd(cmd):\n  eprint(\"cmd:\" + \" \".join(cmd))\n\ndef run_cmd(cmd):\n  print_cmd(cmd)\n  res = subprocess.run(cmd, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n  eprint(res.stdout.decode('utf-8'))\n\ndef run_cmd_out(cmd):\n  print_cmd(cmd)\n  s = subprocess.check_output(cmd)\n  return s.decode(\"utf-8\")\n\ndef run_cmd_show_progress(cmd):\n  eprint(\"Running '%s'\" % cmd)\n  p = subprocess.Popen(cmd, stdout = subprocess.PIPE,\n          stderr = subprocess.STDOUT, shell = True)\n  while True:\n    line = p.stdout.readline()\n    if not line:\n      break\n    sys.stdout.buffer.write(line)\n    sys.stdout.flush()\n  #eprint(\"Finished runnign '%s'\" % \" \".join(cmd))\n\ndef verify_docker_running():\n  try:\n    run_cmd([\"docker\", \"ps\"])\n  except:\n    eprint(\"docker is not running! must run docker\")\n    sys.exit(10)\n\n# not sure if this covers all cases\ndef decode_status(status_verbose):\n  if \"Exited\" in status_verbose:\n    return kStatusExited\n  return kStatusRunning\n\n# given:\n# 0.0.0.0:7200-\u003e3306/tcp\n# return (0.0.0.0, 7200) or None if doesn't match\ndef decode_ip_port(mappings):\n  parts = mappings.split(\"-\u003e\")\n  if len(parts) != 2:\n    return None\n  parts = parts[0].split(\":\")\n  if len(parts) != 2:\n    return None\n  return parts\n\n# returns:\n#  - container id\n#  - status\n#  - (ip, port) in the host that maps to exposed port inside the container (or None)\n# returns (None, None, None) if no container of that name\ndef docker_container_info(containerName):\n  s = run_cmd_out([\"docker\", \"ps\", \"-a\", \"--format\", \"{{.ID}}|{{.Status}}|{{.Ports}}|{{.Names}}\"])\n  # this returns a line like:\n  # 6c5a934e00fb|Exited (0) 3 months ago|0.0.0.0:7200-\u003e3306/tcp|mysql-56-for-quicknotes\n  lines = s.split(\"\\n\")\n  for l in lines:\n    if len(l) == 0:\n      continue\n    parts = l.split(\"|\")\n    assert len(parts) == 4, \"parts: %s\" % parts\n    id, status, mappings, names = parts\n    if containerName in names:\n      status = decode_status(status)\n      ip_port = decode_ip_port(mappings)\n      return (id, status, ip_port)\n  return (None, None, None)\n\ndef wait_for_container(containerName):\n  # 8 secs is a heuristic\n  timeOut = 8\n  eprint(\"waiting %s secs for container to start\" % timeOut, end=\"\", flush=True)\n  while timeOut \u003e 0:\n    (containerId, status, ip_port) = docker_container_info(containerName)\n    if status == kStatusRunning:\n      return\n    eprint(\".\", end=\"\", flush=True)\n    time.sleep(1)\n    timeOut -= 1\n  eprint(\"\")\n\ndef start_container_if_needed(imageName, containerName, portMapping):\n  (containerId, status, ip_port) = docker_container_info(containerName)\n  if status == kStatusRunning:\n    eprint(\"container %s is already running\" % containerName)\n    return\n  if status == kStatusExited:\n    cmd = [\"docker\", \"start\", containerId]\n  else:\n    volumeMapping = \"%s:/var/lib/mysql\" % dbDir\n    cmd = [\"docker\", \"run\", \"-d\", \"--name=\" + containerName, \"-p\", portMapping, \"-v\", volumeMapping, \"-e\", \"MYSQL_ALLOW_EMPTY_PASSWORD=yes\", imageName]\n  run_cmd(cmd)\n  wait_for_container(containerName)\n\ndef create_db_dir():\n  try:\n    os.makedirs(dbDir)\n  except:\n    # throws if already exists, which is ok\n    pass\n\ndef main():\n  verify_docker_running()\n  create_db_dir()\n  start_container_if_needed(imageName, containerName, dockerDbLocalPort + \":3306\")\n  (containerId, status, ip_port) = docker_container_info(containerName)\n  assert ip_port is not None\n  ip, port = ip_port\n  print(\"%s;%s\" % (ip, port))\n\nif __name__ == \"__main__\":\n  main()",
        "code_language": "Python"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1512295807755,
        "id": "9a091f48-f01c-434d-9b8a-7bf44b4e03d5",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1512295807755,
        "parent_id": "ed25f870-79cc-4b0b-9080-460e062053e4",
        "parent_table": "block",
        "type": "sub_header",
        "version": 0
      }
    ],
    "title": "Using MySQL in Docker for local testing in Python",
    "format_page": {
      "page_cover": "",
      "page_cover_position": 0,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 21
    }
  ],
  "Tables": null
}