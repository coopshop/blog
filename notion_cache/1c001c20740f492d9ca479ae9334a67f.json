{
  "ID": "1c001c20-740f-492d-9ca4-79ae9334a67f",
  "Root": {
    "alive": true,
    "content": [
      "346c3de1-f467-4989-92f4-d5263c2397df",
      "35b6aa41-e281-42e3-892f-b347fbaf3e4f",
      "05dd7ed3-9029-40d1-be2e-1284a23fe71c",
      "f8a0f245-4b38-4446-934a-c454b9d30786",
      "3b335976-7c14-41c2-b4c8-3c7c29ec635d",
      "ed582fac-e0ca-4f9d-946c-d8f151a9248b",
      "60ae729e-665b-4be3-9a28-3db1766d5c79",
      "ad37e417-536f-4782-80c2-55588f55d2dc",
      "d2c9557a-11cd-4633-914a-ca80b4666474",
      "c5efdeae-ed37-44aa-958e-3f6c86240101",
      "09140a34-3133-4c49-82d6-672550f97ec2",
      "b49c9c4e-7677-421a-aad1-d025e8364954",
      "f8aac4f3-5c8d-4684-9906-2c01ae9966cf",
      "2e26c427-d181-4cb0-9495-4320671ac933",
      "674c888a-ce41-4edc-8da8-2b68160678a2",
      "e9e34d11-69ca-48ec-a0c9-7764bc372581",
      "f32567aa-43d7-432a-8d27-608268451b14",
      "18237c60-7772-4856-a836-9d815fd64f4f",
      "91ddce71-a579-4b75-bbc9-6e14d26e08c2",
      "4fa3598c-6ecd-457a-9063-16491dadde28",
      "b3e1c820-565e-4d6b-bc1b-bc3acd3da4fd",
      "c612a505-a09d-4ad8-a771-abd5ee8117f6",
      "255b021c-e008-484f-99c3-a56947650ffe",
      "5d1858e3-bcaa-45d7-b175-39d607a6fa14",
      "ab868e83-4c93-4d4b-a838-7161305d8c51",
      "2abc965b-994d-41c1-abe8-c8999f875080",
      "33bcbdbc-2bf7-4957-99c1-fb00cbd5a7ea",
      "3a74c405-ed4c-451d-a722-f84e650e9a58",
      "0ab00628-f5ab-4743-a294-77ca1b4e4343",
      "c532afea-b7fd-4120-a6c5-3f677da5a2e6",
      "9cbb8204-372c-4244-a8e4-c1b841bb29ac",
      "381801ec-1f73-48a2-9de0-03462f07ddc8",
      "28585436-0fe4-4340-9884-244bae878c25",
      "3e78878f-0b08-49ff-8974-094ebda25cd0",
      "1fd212ee-39cf-4e13-b648-828c8d4799e6",
      "bc0d1ed1-a8b6-4338-93ce-103f796d83f2",
      "7091d0ba-d42e-40ea-9507-467e05f92864"
    ],
    "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "created_time": 1531888792668,
    "file_ids": [
      "93736f85-fcb4-4042-8f62-898557db7db2"
    ],
    "format": {
      "page_cover": "https://s3-us-west-2.amazonaws.com/secure.notion-static.com/93736f85-fcb4-4042-8f62-898557db7db2/header-11.jpg",
      "page_full_width": true,
      "page_small_text": true,
      "page_cover_position": 0.5
    },
    "id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
    "ignore_block_count": true,
    "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
    "last_edited_time": 1532405956268,
    "parent_id": "7495260a-1daa-4611-8858-ad2e049e77e6",
    "parent_table": "block",
    "properties": {
      "title": [
        [
          "Using MySQL in Docker for local testing In Go"
        ]
      ]
    },
    "type": "page",
    "version": 48,
    "content_resolved": [
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531890113355,
        "id": "346c3de1-f467-4989-92f4-d5263c2397df",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531890129888,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Id: w4re"
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "Id: w4re"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531890113355,
        "id": "35b6aa41-e281-42e3-892f-b347fbaf3e4f",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531890113363,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Tags: go"
            ]
          ]
        },
        "type": "text",
        "version": 2,
        "inline_content": [
          {
            "Text": "Tags: go"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531890113355,
        "id": "05dd7ed3-9029-40d1-be2e-1284a23fe71c",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531890113363,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "CreatedAt: 2017-06-12T06:16:54Z"
            ]
          ]
        },
        "type": "text",
        "version": 2,
        "inline_content": [
          {
            "Text": "CreatedAt: 2017-06-12T06:16:54Z"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531890113355,
        "id": "f8a0f245-4b38-4446-934a-c454b9d30786",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531890113363,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "UpdatedAt: 2017-07-09T01:50:59Z"
            ]
          ]
        },
        "type": "text",
        "version": 2,
        "inline_content": [
          {
            "Text": "UpdatedAt: 2017-07-09T01:50:59Z"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531890113355,
        "id": "3b335976-7c14-41c2-b4c8-3c7c29ec635d",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1532405956268,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "PublishedOn: 2017-07-23"
            ]
          ]
        },
        "type": "text",
        "version": 4,
        "inline_content": [
          {
            "Text": "PublishedOn: 2017-07-23"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531890113355,
        "id": "ed582fac-e0ca-4f9d-946c-d8f151a9248b",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531890113363,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Collection: go-cookbook"
            ]
          ]
        },
        "type": "text",
        "version": 2,
        "inline_content": [
          {
            "Text": "Collection: go-cookbook"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531890113355,
        "id": "60ae729e-665b-4be3-9a28-3db1766d5c79",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531890113363,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Description: How and why to run MySQL in Docker when developing Go web apps locally."
            ]
          ]
        },
        "type": "text",
        "version": 2,
        "inline_content": [
          {
            "Text": "Description: How and why to run MySQL in Docker when developing Go web apps locally."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531890116863,
        "id": "ad37e417-536f-4782-80c2-55588f55d2dc",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531890116863,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "type": "text",
        "version": 4
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792659,
        "id": "d2c9557a-11cd-4633-914a-ca80b4666474",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888792659,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Imagine you’re writing a web application that uses MySQL. You "
            ],
            [
              "deploy on Linux",
              [
                [
                  "a",
                  "/article/5/blueprint-for-deploying-web-apps-on-coreos.html"
                ]
              ]
            ],
            [
              " but code and test on Mac."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Imagine you’re writing a web application that uses MySQL. You "
          },
          {
            "Text": "deploy on Linux",
            "Link": "/article/5/blueprint-for-deploying-web-apps-on-coreos.html"
          },
          {
            "Text": " but code and test on Mac."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792659,
        "id": "c5efdeae-ed37-44aa-958e-3f6c86240101",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888792659,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "What is a good way to setup MySQL database for local developement and testing on Mac?"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "What is a good way to setup MySQL database for local developement and testing on Mac?"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792662,
        "id": "09140a34-3133-4c49-82d6-672550f97ec2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888792662,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "You can install MySQL on Mac using "
            ],
            [
              "official MySQL installer",
              [
                [
                  "a",
                  "https://dev.mysql.com/downloads/mysql/"
                ]
              ]
            ],
            [
              " or via "
            ],
            [
              "Homebrew",
              [
                [
                  "a",
                  "https://brew.sh/"
                ]
              ]
            ],
            [
              " but my favorite way is to use "
            ],
            [
              "docker",
              [
                [
                  "a",
                  "https://store.docker.com/editions/community/docker-ce-desktop-mac"
                ]
              ]
            ],
            [
              "."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "You can install MySQL on Mac using "
          },
          {
            "Text": "official MySQL installer",
            "Link": "https://dev.mysql.com/downloads/mysql/"
          },
          {
            "Text": " or via "
          },
          {
            "Text": "Homebrew",
            "Link": "https://brew.sh/"
          },
          {
            "Text": " but my favorite way is to use "
          },
          {
            "Text": "docker",
            "Link": "https://store.docker.com/editions/community/docker-ce-desktop-mac"
          },
          {
            "Text": "."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792662,
        "id": "b49c9c4e-7677-421a-aad1-d025e8364954",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531890136916,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Docker better isolates MySQL from the rest of the system, which has a couple of advantages:"
            ]
          ]
        },
        "type": "text",
        "version": 3,
        "inline_content": [
          {
            "Text": "Docker better isolates MySQL from the rest of the system, which has a couple of advantages:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531890136916,
        "id": "f8aac4f3-5c8d-4684-9906-2c01ae9966cf",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531890142221,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "it’s easier to install the exact version of MySQL that is running in production as there is a docker image for every version"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 21,
        "inline_content": [
          {
            "Text": "it’s easier to install the exact version of MySQL that is running in production as there is a docker image for every version"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531890142221,
        "id": "2e26c427-d181-4cb0-9495-4320671ac933",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531890148104,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "you don’t have to worry that "
            ],
            [
              "brew upgrade",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " will upgrade MySQL. Auto-upgrade is desired for most software but not a database. You need to remember to use "
            ],
            [
              "brew pin",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to disable that"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 14,
        "inline_content": [
          {
            "Text": "you don’t have to worry that "
          },
          {
            "Text": "brew upgrade",
            "AttrFlags": 2
          },
          {
            "Text": " will upgrade MySQL. Auto-upgrade is desired for most software but not a database. You need to remember to use "
          },
          {
            "Text": "brew pin",
            "AttrFlags": 2
          },
          {
            "Text": " to disable that"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531890148104,
        "id": "674c888a-ce41-4edc-8da8-2b68160678a2",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531890151439,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "you can run several different versions of MySQL for different projects"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 14,
        "inline_content": [
          {
            "Text": "you can run several different versions of MySQL for different projects"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531890151439,
        "id": "e9e34d11-69ca-48ec-a0c9-7764bc372581",
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531890152283,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "since it’s running on Linux, it’s closer to the code running in production"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 12,
        "inline_content": [
          {
            "Text": "since it’s running on Linux, it’s closer to the code running in production"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792662,
        "id": "f32567aa-43d7-432a-8d27-608268451b14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888792662,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "There is a downside to using Docker:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "There is a downside to using Docker:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792662,
        "id": "18237c60-7772-4856-a836-9d815fd64f4f",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888792662,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "you have to make sure that the database container is running"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "you have to make sure that the database container is running"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792662,
        "id": "91ddce71-a579-4b75-bbc9-6e14d26e08c2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888792662,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "you need to know the ip address of docker vm running the container"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "you need to know the ip address of docker vm running the container"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792663,
        "id": "4fa3598c-6ecd-457a-9063-16491dadde28",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888792663,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Doing this manually would be annoying and I like to automate so I wrote re-usable bit of Go code to do that."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Doing this manually would be annoying and I like to automate so I wrote re-usable bit of Go code to do that."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792663,
        "id": "b3e1c820-565e-4d6b-bc1b-bc3acd3da4fd",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888792663,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It’s just a matter of running docker commands and parsing their outputs but it’s difficult enough to worth sharing the complete solution."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It’s just a matter of running docker commands and parsing their outputs but it’s difficult enough to worth sharing the complete solution."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792663,
        "id": "c612a505-a09d-4ad8-a771-abd5ee8117f6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888792663,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Conceptually, what we do is:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "Conceptually, what we do is:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792663,
        "id": "255b021c-e008-484f-99c3-a56947650ffe",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888792663,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "run "
            ],
            [
              "docker ps -a",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " and parse the output"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "run "
          },
          {
            "Text": "docker ps -a",
            "AttrFlags": 2
          },
          {
            "Text": " and parse the output"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792663,
        "id": "5d1858e3-bcaa-45d7-b175-39d607a6fa14",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888792663,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "if the container is not running at all, start it with "
            ],
            [
              "docker run",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "if the container is not running at all, start it with "
          },
          {
            "Text": "docker run",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792664,
        "id": "ab868e83-4c93-4d4b-a838-7161305d8c51",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888792664,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "if the container is stopped, re-start it with "
            ],
            [
              "docker start",
              [
                [
                  "c"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "if the container is stopped, re-start it with "
          },
          {
            "Text": "docker start",
            "AttrFlags": 2
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792664,
        "id": "2abc965b-994d-41c1-abe8-c8999f875080",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888792664,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "if the container is already running, extract ip address/port from the output"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "if the container is already running, extract ip address/port from the output"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792664,
        "id": "33bcbdbc-2bf7-4957-99c1-fb00cbd5a7ea",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888792664,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "MySQL database is stored in a local directory mounted by the container. That way data persists even if the container is stopped."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "MySQL database is stored in a local directory mounted by the container. That way data persists even if the container is stopped."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792664,
        "id": "3a74c405-ed4c-451d-a722-f84e650e9a58",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888792664,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "The code is re-usable. You can customize it by changing:"
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "The code is re-usable. You can customize it by changing:"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792666,
        "id": "0ab00628-f5ab-4743-a294-77ca1b4e4343",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888792666,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "the base MySQL container. In my case it’s "
            ],
            [
              "mysql:5.6",
              [
                [
                  "c"
                ],
                [
                  "a",
                  "https://hub.docker.com/_/mysql/"
                ]
              ]
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "the base MySQL container. In my case it’s "
          },
          {
            "Text": "mysql:5.6",
            "AttrFlags": 2,
            "Link": "https://hub.docker.com/_/mysql/"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792666,
        "id": "c532afea-b7fd-4120-a6c5-3f677da5a2e6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888792666,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "where MySQL data is stored"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "where MySQL data is stored"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792666,
        "id": "9cbb8204-372c-4244-a8e4-c1b841bb29ac",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888792666,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "name of the container, which should by unique to the project"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "name of the container, which should by unique to the project"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792667,
        "id": "381801ec-1f73-48a2-9de0-03462f07ddc8",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888792667,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "port on which the database is exposed locally. In the container MySQL listens on standard port 3306. It must be exposed locally on a unique port"
            ]
          ]
        },
        "type": "bulleted_list",
        "version": 1,
        "inline_content": [
          {
            "Text": "port on which the database is exposed locally. In the container MySQL listens on standard port 3306. It must be exposed locally on a unique port"
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792667,
        "id": "28585436-0fe4-4340-9884-244bae878c25",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888792667,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "It can be adapted for other databases, like PostgreSQL."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "It can be adapted for other databases, like PostgreSQL."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792667,
        "id": "3e78878f-0b08-49ff-8974-094ebda25cd0",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888792667,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "We should only start docker when running locally. In my software I use cmd-line flag "
            ],
            [
              "-production",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " to distinguish between running in production and locally."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "We should only start docker when running locally. In my software I use cmd-line flag "
          },
          {
            "Text": "-production",
            "AttrFlags": 2
          },
          {
            "Text": " to distinguish between running in production and locally."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792667,
        "id": "1fd212ee-39cf-4e13-b648-828c8d4799e6",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531888792667,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "In production I would use the hard-coded host/ip of MySQL server. Locally I would call "
            ],
            [
              "startLocalDockerDbMust()",
              [
                [
                  "c"
                ]
              ]
            ],
            [
              " go get them."
            ]
          ]
        },
        "type": "text",
        "version": 1,
        "inline_content": [
          {
            "Text": "In production I would use the hard-coded host/ip of MySQL server. Locally I would call "
          },
          {
            "Text": "startLocalDockerDbMust()",
            "AttrFlags": 2
          },
          {
            "Text": " go get them."
          }
        ]
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792667,
        "id": "bc0d1ed1-a8b6-4338-93ce-103f796d83f2",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531890100699,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "language": [
            [
              "Go"
            ]
          ],
          "title": [
            [
              "const (\n    dockerStatusExited  = \"exited\"\n    dockerStatusRunning = \"running\"\n)\n\nvar (\n    // using https://hub.docker.com/_/mysql/\n    // to use the latest mysql, use mysql:8\n    dockerImageName = \"mysql:5.6\"\n    // name must be unique across containers runing on this computer\n    dockerContainerName = \"mysql-db-multi\"\n    // where mysql stores databases. Must be on local disk so that\n    // database outlives the container\n    dockerDbDir = \"~/data/db-multi\"\n    // 3306 is standard MySQL port, I use a unique port to be able\n    // to run multiple mysql instances for different projects\n    dockerDbLocalPort = \"7200\"\n)\n\ntype containerInfo struct {\n    id       string\n    name     string\n    mappings string\n    status   string\n}\n\nfunc quoteIfNeeded(s string) string {\n    if strings.Contains(s, \" \") || strings.Contains(s, \"\\\"\") {\n        s = strings.Replace(s, `\"`, `\\\"`, -1)\n        return `\"` + s + `\"`\n    }\n    return s\n}\n\nfunc cmdString(cmd *exec.Cmd) string {\n    n := len(cmd.Args)\n    a := make([]string, n, n)\n    for i := 0; i \u003c n; i++ {\n        a[i] = quoteIfNeeded(cmd.Args[i])\n    }\n    return strings.Join(a, \" \")\n}\n\nfunc runCmdWithLogging(cmd *exec.Cmd) error {\n    cmd.Stdout = os.Stdout\n    cmd.Stderr = os.Stderr\n    return cmd.Run()\n}\n\nfunc decodeContainerStaus(status string) string {\n    // convert \"Exited (0) 2 days ago\" into statusExited\n    if strings.HasPrefix(status, \"Exited\") {\n        return dockerStatusExited\n    }\n    // convert \"Up \u003ctime\u003e\" into statusRunning\n    if strings.HasPrefix(status, \"Up \") {\n        return dockerStatusRunning\n    }\n    return strings.ToLower(status)\n}\n\n// given:\n// 0.0.0.0:7200-\u003e3306/tcp\n// return (0.0.0.0, 7200) or None if doesn't match\nfunc decodeIPPortMust(mappings string) (string, string) {\n    parts := strings.Split(mappings, \"-\u003e\")\n    panicIf(len(parts) != 2, \"invalid mappings string: '%s'\", mappings)\n    parts = strings.Split(parts[0], \":\")\n    panicIf(len(parts) != 2, \"invalid mappints string: '%s'\", mappings)\n    return parts[0], parts[1]\n}\n\nfunc dockerContainerInfoMust(containerName string) *containerInfo {\n    cmd := exec.Command(\"docker\", \"ps\", \"-a\", \"--format\", \"{{.ID}}|{{.Status}}|{{.Ports}}|{{.Names}}\")\n    outBytes, err := cmd.CombinedOutput()\n    panicIfErr(err, \"cmd.CombinedOutput() for '%s' failed with %s\", cmdString(cmd), err)\n    s := string(outBytes)\n    // this returns a line like:\n    // 6c5a934e00fb|Exited (0) 3 months ago|0.0.0.0:7200-\u003e3306/tcp|mysql-db-multi\n    s = strings.TrimSpace(s)\n    lines := strings.Split(s, \"\\n\")\n    for _, line := range lines {\n        parts := strings.Split(line, \"|\")\n        panicIf(len(parts) != 4, \"Unexpected output from docker ps:\\n%s\\n. Expected 4 parts, got %d (%v)\\n\", line, len(parts), parts)\n        id, status, mappings, name := parts[0], parts[1], parts[2], parts[3]\n        if containerName == name {\n            return \u0026containerInfo{\n                id:       id,\n                status:   decodeContainerStaus(status),\n                mappings: mappings,\n                name:     name,\n            }\n        }\n    }\n    return nil\n}\n\n// returns host and port on which database accepts connection\nfunc startLocalDockerDbMust() (string, string) {\n    // docker must be running\n    cmd := exec.Command(\"docker\", \"ps\")\n    err := cmd.Run()\n    panicIfErr(err, \"docker must be running! Error: %s\", err)\n    // ensure directory for database files exists\n    dbDir := expandTildeInPath(dockerDbDir)\n    err = os.MkdirAll(dbDir, 0755)\n    panicIfErr(err, \"failed to create dir '%s'. Error: %s\", err)\n    info := dockerContainerInfoMust(dockerContainerName)\n    if info != nil \u0026\u0026 info.status == dockerStatusRunning {\n        return decodeIPPortMust(info.mappings)\n    }\n    // start or resume container\n    if info == nil {\n        // start new container\n        volumeMapping := dockerDbDir + \"s:/var/lib/mysql\"\n        dockerPortMapping := dockerDbLocalPort + \":3306\"\n        cmd = exec.Command(\"docker\", \"run\", \"-d\", \"--name\"+dockerContainerName, \"-p\", dockerPortMapping, \"-v\", volumeMapping, \"-e\", \"MYSQL_ALLOW_EMPTY_PASSWORD=yes\", \"-e\", \"MYSQL_INITDB_SKIP_TZINFO=yes\", dockerImageName)\n    } else {\n        // start stopped container\n        cmd = exec.Command(\"docker\", \"start\", info.id)\n    }\n    runCmdWithLogging(cmd)\n\n    // wait max 8 seconds for the container to start\n    for i := 0; i \u003c 8; i++ {\n        info := dockerContainerInfoMust(dockerContainerName)\n        if info != nil \u0026\u0026 info.status == dockerStatusRunning {\n            return decodeIPPortMust(info.mappings)\n        }\n        time.Sleep(time.Second)\n    }\n\n    panicIf(true, \"docker container '%s' didn't start in time\", dockerContainerName)\n    return \"\", \"\"\n}"
            ]
          ]
        },
        "type": "code",
        "version": 3,
        "code": "const (\n    dockerStatusExited  = \"exited\"\n    dockerStatusRunning = \"running\"\n)\n\nvar (\n    // using https://hub.docker.com/_/mysql/\n    // to use the latest mysql, use mysql:8\n    dockerImageName = \"mysql:5.6\"\n    // name must be unique across containers runing on this computer\n    dockerContainerName = \"mysql-db-multi\"\n    // where mysql stores databases. Must be on local disk so that\n    // database outlives the container\n    dockerDbDir = \"~/data/db-multi\"\n    // 3306 is standard MySQL port, I use a unique port to be able\n    // to run multiple mysql instances for different projects\n    dockerDbLocalPort = \"7200\"\n)\n\ntype containerInfo struct {\n    id       string\n    name     string\n    mappings string\n    status   string\n}\n\nfunc quoteIfNeeded(s string) string {\n    if strings.Contains(s, \" \") || strings.Contains(s, \"\\\"\") {\n        s = strings.Replace(s, `\"`, `\\\"`, -1)\n        return `\"` + s + `\"`\n    }\n    return s\n}\n\nfunc cmdString(cmd *exec.Cmd) string {\n    n := len(cmd.Args)\n    a := make([]string, n, n)\n    for i := 0; i \u003c n; i++ {\n        a[i] = quoteIfNeeded(cmd.Args[i])\n    }\n    return strings.Join(a, \" \")\n}\n\nfunc runCmdWithLogging(cmd *exec.Cmd) error {\n    cmd.Stdout = os.Stdout\n    cmd.Stderr = os.Stderr\n    return cmd.Run()\n}\n\nfunc decodeContainerStaus(status string) string {\n    // convert \"Exited (0) 2 days ago\" into statusExited\n    if strings.HasPrefix(status, \"Exited\") {\n        return dockerStatusExited\n    }\n    // convert \"Up \u003ctime\u003e\" into statusRunning\n    if strings.HasPrefix(status, \"Up \") {\n        return dockerStatusRunning\n    }\n    return strings.ToLower(status)\n}\n\n// given:\n// 0.0.0.0:7200-\u003e3306/tcp\n// return (0.0.0.0, 7200) or None if doesn't match\nfunc decodeIPPortMust(mappings string) (string, string) {\n    parts := strings.Split(mappings, \"-\u003e\")\n    panicIf(len(parts) != 2, \"invalid mappings string: '%s'\", mappings)\n    parts = strings.Split(parts[0], \":\")\n    panicIf(len(parts) != 2, \"invalid mappints string: '%s'\", mappings)\n    return parts[0], parts[1]\n}\n\nfunc dockerContainerInfoMust(containerName string) *containerInfo {\n    cmd := exec.Command(\"docker\", \"ps\", \"-a\", \"--format\", \"{{.ID}}|{{.Status}}|{{.Ports}}|{{.Names}}\")\n    outBytes, err := cmd.CombinedOutput()\n    panicIfErr(err, \"cmd.CombinedOutput() for '%s' failed with %s\", cmdString(cmd), err)\n    s := string(outBytes)\n    // this returns a line like:\n    // 6c5a934e00fb|Exited (0) 3 months ago|0.0.0.0:7200-\u003e3306/tcp|mysql-db-multi\n    s = strings.TrimSpace(s)\n    lines := strings.Split(s, \"\\n\")\n    for _, line := range lines {\n        parts := strings.Split(line, \"|\")\n        panicIf(len(parts) != 4, \"Unexpected output from docker ps:\\n%s\\n. Expected 4 parts, got %d (%v)\\n\", line, len(parts), parts)\n        id, status, mappings, name := parts[0], parts[1], parts[2], parts[3]\n        if containerName == name {\n            return \u0026containerInfo{\n                id:       id,\n                status:   decodeContainerStaus(status),\n                mappings: mappings,\n                name:     name,\n            }\n        }\n    }\n    return nil\n}\n\n// returns host and port on which database accepts connection\nfunc startLocalDockerDbMust() (string, string) {\n    // docker must be running\n    cmd := exec.Command(\"docker\", \"ps\")\n    err := cmd.Run()\n    panicIfErr(err, \"docker must be running! Error: %s\", err)\n    // ensure directory for database files exists\n    dbDir := expandTildeInPath(dockerDbDir)\n    err = os.MkdirAll(dbDir, 0755)\n    panicIfErr(err, \"failed to create dir '%s'. Error: %s\", err)\n    info := dockerContainerInfoMust(dockerContainerName)\n    if info != nil \u0026\u0026 info.status == dockerStatusRunning {\n        return decodeIPPortMust(info.mappings)\n    }\n    // start or resume container\n    if info == nil {\n        // start new container\n        volumeMapping := dockerDbDir + \"s:/var/lib/mysql\"\n        dockerPortMapping := dockerDbLocalPort + \":3306\"\n        cmd = exec.Command(\"docker\", \"run\", \"-d\", \"--name\"+dockerContainerName, \"-p\", dockerPortMapping, \"-v\", volumeMapping, \"-e\", \"MYSQL_ALLOW_EMPTY_PASSWORD=yes\", \"-e\", \"MYSQL_INITDB_SKIP_TZINFO=yes\", dockerImageName)\n    } else {\n        // start stopped container\n        cmd = exec.Command(\"docker\", \"start\", info.id)\n    }\n    runCmdWithLogging(cmd)\n\n    // wait max 8 seconds for the container to start\n    for i := 0; i \u003c 8; i++ {\n        info := dockerContainerInfoMust(dockerContainerName)\n        if info != nil \u0026\u0026 info.status == dockerStatusRunning {\n            return decodeIPPortMust(info.mappings)\n        }\n        time.Sleep(time.Second)\n    }\n\n    panicIf(true, \"docker container '%s' didn't start in time\", dockerContainerName)\n    return \"\", \"\"\n}",
        "code_language": "Go"
      },
      {
        "alive": true,
        "created_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "created_time": 1531888792668,
        "id": "7091d0ba-d42e-40ea-9507-467e05f92864",
        "ignore_block_count": true,
        "last_edited_by": "bb760e2d-d679-4b64-b2a9-03005b21870a",
        "last_edited_time": 1531890102344,
        "parent_id": "1c001c20-740f-492d-9ca4-79ae9334a67f",
        "parent_table": "block",
        "properties": {
          "title": [
            [
              "Code for this chapter: "
            ],
            [
              "https://github.com/kjk/go-cookbook/blob/master/start-mysql-in-docker-go",
              [
                [
                  "a",
                  "https://github.com/kjk/go-cookbook/blob/master/start-mysql-in-docker-go"
                ]
              ]
            ]
          ]
        },
        "type": "text",
        "version": 7,
        "inline_content": [
          {
            "Text": "Code for this chapter: "
          },
          {
            "Text": "https://github.com/kjk/go-cookbook/blob/master/start-mysql-in-docker-go",
            "Link": "https://github.com/kjk/go-cookbook/blob/master/start-mysql-in-docker-go"
          }
        ]
      }
    ],
    "title": "Using MySQL in Docker for local testing In Go",
    "format_page": {
      "page_cover": "https://s3-us-west-2.amazonaws.com/secure.notion-static.com/93736f85-fcb4-4042-8f62-898557db7db2/header-11.jpg",
      "page_cover_position": 0.5,
      "page_font": "",
      "page_full_width": true,
      "page_icon": "",
      "page_small_text": true,
      "page_cover_url": "https://www.notion.so/image/https:%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F93736f85-fcb4-4042-8f62-898557db7db2%2Fheader-11.jpg"
    }
  },
  "Users": [
    {
      "email": "kkowalczyk@gmail.com",
      "family_name": "Kowalczyk",
      "given_name": "Krzysztof",
      "id": "bb760e2d-d679-4b64-b2a9-03005b21870a",
      "locale": "en",
      "mobile_onboarding_completed": true,
      "onboarding_completed": true,
      "profile_photo": "https://s3-us-west-2.amazonaws.com/public.notion-static.com/2dcaa66c-7674-4ff6-9924-601785b63561/head-bw-640x960.png",
      "time_zone": "America/Los_Angeles",
      "version": 29
    }
  ],
  "Tables": null
}